name: Build and Release

on:
  push:
    branches: [main, develop]
    tags: ["v*"]
  pull_request:
    branches: [main]

env:
  BUILD_TYPE: Release
  VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
  VCPKG_ROOT: ${{ github.workspace }}/vcpkg

jobs:
  build-windows:
    runs-on: windows-2022

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: "5.15.2"
          target: "desktop"
          arch: "win64_msvc2019_64"

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: "ef7dbf9f4f5ef2e4d9988157b2b56c7f35b7e3f8"
          vcpkgDirectory: "${{ github.workspace }}/vcpkg"

      - name: Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1

      - name: Setup CMake
        uses: lukka/get-cmake@latest

      - name: Install vcpkg dependencies (non-Qt only)
        run: |
          ${{ github.workspace }}/vcpkg/vcpkg.exe install detours:x64-windows
        env:
          VCPKG_ROOT: ${{ github.workspace }}/vcpkg

      - name: Configure CMake
        run: |
          cmake -B ${{ github.workspace }}/build `
            -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake `
            -DVCPKG_TARGET_TRIPLET=x64-windows `
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} `
            -DCMAKE_PREFIX_PATH="${{ env.Qt5_Dir }}" `
            -G "Visual Studio 17 2022" -A x64
        env:
          VCPKG_ROOT: ${{ github.workspace }}/vcpkg

      - name: Build
        run: cmake --build ${{ github.workspace }}/build --config ${{ env.BUILD_TYPE }} --parallel

      - name: Run Tests
        run: |
          # Test if executables were built successfully
          if (Test-Path "${{ github.workspace }}/build/bin/FakeInfoHardwareSpoofer.exe") {
            Write-Host "✓ Main executable built successfully"
          } else {
            Write-Error "✗ Main executable not found"
            exit 1
          }

          if (Test-Path "${{ github.workspace }}/build/bin/HookDLL.dll") {
            Write-Host "✓ Hook DLL built successfully"
          } else {
            Write-Warning "⚠ Hook DLL not found - some features may not work"
          }

          if (Test-Path "${{ github.workspace }}/build/bin/TestWMI.exe") {
            Write-Host "✓ Test program built successfully"

            # Run a quick test to ensure the test program works
            Write-Host "Running WMI test program..."
            $testOutput = & "${{ github.workspace }}/build/bin/TestWMI.exe" 2>&1
            if ($LASTEXITCODE -eq 0) {
              Write-Host "✓ WMI test program executed successfully"
            } else {
              Write-Warning "⚠ WMI test program had issues, but continuing build"
            }
          } else {
            Write-Warning "⚠ Test program not found"
          }
        shell: powershell

      - name: Create sample configuration
        run: |
          # Copy sample config to build directory for packaging
          Copy-Item "sample_config.json" "${{ github.workspace }}/build/bin/hardware_config.json"
          Write-Host "✓ Sample configuration copied"
        shell: powershell

      - name: Package Application
        shell: powershell
        run: |
          $version = if ($env:GITHUB_REF -match 'refs/tags/v(.*)') { $matches[1] } else { "dev-$($env:GITHUB_SHA.Substring(0,7))" }
          Write-Host "Packaging version: $version"
          .\scripts\package.ps1 -Version $version
        env:
          VCPKG_ROOT: ${{ github.workspace }}/vcpkg

      - name: Verify package contents
        run: |
          Write-Host "Checking package contents..."
          if (Test-Path "dist") {
            Get-ChildItem "dist" -Recurse | ForEach-Object {
              Write-Host "  $($_.FullName)"
            }
          } else {
            Write-Error "Package directory not found"
            exit 1
          }
        shell: powershell

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: FakeInfoHardwareSpoofer-Windows-x64-${{ github.run_number }}
          path: dist/
          retention-days: 30

      - name: Create Release (on tag)
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*.zip
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
