name: Build and Release

on:
  push:
    branches: [main, develop]
    tags: ["v*"]
  pull_request:
    branches: [main]

permissions:
  contents: write
  packages: write
  actions: read

env:
  BUILD_TYPE: Release

jobs:
  build-windows:
    runs-on: windows-2022

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: "5.15.2"
          target: "desktop"
          arch: "win64_msvc2019_64"

      - name: Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1

      - name: Setup CMake
        uses: lukka/get-cmake@latest

      - name: Install Detours
        run: |
          # Download and install Detours manually
          git clone https://github.com/microsoft/Detours.git detours
          cd detours
          nmake
          # Create install directory
          mkdir "${{ github.workspace }}/detours-install/include"
          mkdir "${{ github.workspace }}/detours-install/lib"
          # Copy headers and library
          copy src\*.h "${{ github.workspace }}/detours-install/include/"
          copy lib.X64\*.lib "${{ github.workspace }}/detours-install/lib/"
        shell: cmd

      - name: Configure CMake
        run: |
          cmake -B ${{ github.workspace }}/build `
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} `
            -DCMAKE_PREFIX_PATH="${{ env.Qt5_Dir }}" `
            -DDetours_ROOT="${{ github.workspace }}/detours-install" `
            -G "Visual Studio 17 2022" -A x64

      - name: Build
        run: cmake --build ${{ github.workspace }}/build --config ${{ env.BUILD_TYPE }} --parallel

            - name: Deploy Qt libraries
        run: |
          # Find windeployqt and deploy Qt libraries
          $qtDir = "$env:Qt5_Dir"
          $windeployqt = Join-Path $qtDir "bin\windeployqt.exe"
          $targetExe = "${{ github.workspace }}/build/bin/FakeInfoHardwareSpoofer.exe"
          
          Write-Host "Qt Directory: $qtDir"
          Write-Host "Looking for windeployqt at: $windeployqt"
          Write-Host "Target executable: $targetExe"
          
          if (Test-Path $windeployqt) {
            Write-Host "Found windeployqt at: $windeployqt"
            & $windeployqt --no-angle --no-translations --no-system-d3d-compiler --no-opengl-sw $targetExe
            Write-Host "Qt libraries deployed successfully"
          } else {
            Write-Warning "windeployqt not found at: $windeployqt"
            Write-Host "Available files in Qt bin directory:"
            if (Test-Path (Join-Path $qtDir "bin")) {
              Get-ChildItem (Join-Path $qtDir "bin") | Select-Object -First 10 | ForEach-Object { Write-Host "  $($_.Name)" }
            }
          }
        shell: powershell

      - name: Copy additional files
        run: |
          # Copy sample config to build directory
          $buildBin = "${{ github.workspace }}/build/bin"
          
          Write-Host "Copying additional files to: $buildBin"
          
          if (Test-Path "sample_config.json") {
            Copy-Item "sample_config.json" "$buildBin/hardware_config.json"
            Write-Host "Copied sample_config.json to hardware_config.json"
          } else {
            Write-Warning "sample_config.json not found"
          }
          
          if (Test-Path "README.md") {
            Copy-Item "README.md" "$buildBin/"
            Write-Host "Copied README.md"
          } else {
            Write-Warning "README.md not found"
          }
          
          Write-Host "Additional files copying completed"
        shell: powershell

      - name: Install NSIS
        run: |
          $nsisUrl = "https://nsis.sourceforge.io/mediawiki/images/4/4a/Nsis-3.08-setup.exe"
          Invoke-WebRequest -Uri $nsisUrl -OutFile "nsis-setup.exe"
          Start-Process -FilePath "nsis-setup.exe" -ArgumentList "/S" -Wait
          Write-Host "NSIS installed successfully"
        shell: powershell

            - name: Package with CPack (NSIS installer)
        run: |
          Set-Location "${{ github.workspace }}/build"
          Write-Host "Current directory: $(Get-Location)"
          
          Write-Host "Generating NSIS installer..."
          cpack -G NSIS -C Release
          if ($LASTEXITCODE -ne 0) {
            Write-Error "NSIS installer generation failed"
            exit 1
          }
          
          Write-Host "Generating ZIP archive..."
          cpack -G ZIP -C Release
          if ($LASTEXITCODE -ne 0) {
            Write-Error "ZIP archive generation failed"
            exit 1
          }
          
          Write-Host "Packages created successfully"
          Write-Host "Generated files:"
          Get-ChildItem -Filter "*.exe" | ForEach-Object { 
            Write-Host "  Installer: $($_.Name) ($(([math]::Round($_.Length/1MB, 2))) MB)"
          }
          Get-ChildItem -Filter "*.zip" | ForEach-Object { 
            Write-Host "  Archive: $($_.Name) ($(([math]::Round($_.Length/1MB, 2))) MB)"
          }
        shell: powershell

            - name: Verify package contents
        run: |
          Write-Host "Checking package contents..."
          Set-Location "${{ github.workspace }}/build"
          
          Write-Host "=== Build directory contents ==="
          Get-ChildItem -Name
          
          Write-Host ""
          Write-Host "=== Binary directory contents ==="
          if (Test-Path "bin") {
            Get-ChildItem "bin" -Name
          } else {
            Write-Host "bin directory not found"
          }
          
          Write-Host ""
          Write-Host "=== Package files ==="
          $exeFiles = Get-ChildItem -Filter "*.exe"
          $zipFiles = Get-ChildItem -Filter "*.zip"
          
          if ($exeFiles.Count -gt 0) {
            $exeFiles | ForEach-Object { 
              $sizeMB = [math]::Round($_.Length/1MB, 2)
              Write-Host "  Installer: $($_.Name) ($sizeMB MB)"
            }
          } else {
            Write-Host "  No .exe files found"
          }
          
          if ($zipFiles.Count -gt 0) {
            $zipFiles | ForEach-Object { 
              $sizeMB = [math]::Round($_.Length/1MB, 2)
              Write-Host "  Archive: $($_.Name) ($sizeMB MB)"
            }
          } else {
            Write-Host "  No .zip files found"
          }
        shell: powershell

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: FakeInfoHardwareSpoofer-Windows-x64-${{ github.run_number }}
          path: |
            build/*.exe
            build/*.zip
            build/bin/
          retention-days: 30

      - name: Create Release (on tag)
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            build/*.exe
            build/*.zip
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            ## FakeInfo Hardware Spoofer Release

            **Version:** ${{ github.ref_name }}
            **Build Date:** ${{ github.run_id }}

            ### Downloads
            - **Windows Installer (recommended)**: `*.exe` - Complete installation package with Qt libraries
            - **Portable Archive**: `*.zip` - Portable version for advanced users

            ### Installation
            1. Download the `.exe` installer file
            2. Run as administrator
            3. Follow the installation wizard

            ### What's Included
            - Main application executable
            - Hook DLL for advanced functionality
            - Qt runtime libraries
            - Sample configuration file
            - Documentation

            ---
            *This is an automated release built from commit ${{ github.sha }}*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
