name: Build and Release

on:
  push:
    branches: [main, develop]
    tags: ["v*"]
  pull_request:
    branches: [main]

permissions:
  contents: write
  packages: write
  actions: read

env:
  BUILD_TYPE: Release

jobs:
  build-windows:
    runs-on: windows-2022

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: "5.15.2"
          target: "desktop"
          arch: "win64_msvc2019_64"

      - name: Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1

      - name: Setup CMake
        uses: lukka/get-cmake@latest

      - name: Install Detours
        run: |
          # Download and install Detours manually
          git clone https://github.com/microsoft/Detours.git detours
          cd detours
          nmake
          # Create install directory
          mkdir "${{ github.workspace }}/detours-install/include"
          mkdir "${{ github.workspace }}/detours-install/lib"
          # Copy headers and library
          copy src\*.h "${{ github.workspace }}/detours-install/include/"
          copy lib.X64\*.lib "${{ github.workspace }}/detours-install/lib/"
        shell: cmd

      - name: Configure CMake
        run: |
          cmake -B ${{ github.workspace }}/build `
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} `
            -DCMAKE_PREFIX_PATH="${{ env.Qt5_Dir }}" `
            -DDetours_ROOT="${{ github.workspace }}/detours-install" `
            -G "Visual Studio 17 2022" -A x64

      - name: Build
        run: cmake --build ${{ github.workspace }}/build --config ${{ env.BUILD_TYPE }} --parallel

      - name: Package Application
        shell: powershell
        run: |
          $version = if ($env:GITHUB_REF -match 'refs/tags/v(.*)') { $matches[1] } else { "dev-$($env:GITHUB_SHA.Substring(0,7))" }
          Write-Host "Packaging version: $version"
          .\scripts\package.ps1 -Version $version

      - name: Verify package contents
        run: |
          Write-Host "Checking package contents..."
          if (Test-Path "dist") {
            Get-ChildItem "dist" -Recurse | ForEach-Object {
              Write-Host "  $($_.FullName)"
            }
          } else {
            Write-Error "Package directory not found"
            exit 1
          }
        shell: powershell

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: FakeInfoHardwareSpoofer-Windows-x64-${{ github.run_number }}
          path: dist/
          retention-days: 30

      - name: Create Release (on tag)
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*.zip
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
