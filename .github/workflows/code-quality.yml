name: Code Quality

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  code-analysis:
    runs-on: windows-2022

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: "5.15.2"
          target: "desktop"
          arch: "win64_msvc2019_64"

      - name: Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1

      - name: Setup CMake
        uses: lukka/get-cmake@latest

      - name: Install Detours
        run: |
          # Download and install Detours manually
          git clone https://github.com/microsoft/Detours.git detours
          cd detours
          nmake
          # Create install directory
          mkdir "${{ github.workspace }}/detours-install/include"
          mkdir "${{ github.workspace }}/detours-install/lib"
          # Copy headers and library
          copy src\*.h "${{ github.workspace }}/detours-install/include/"
          copy lib.X64\*.lib "${{ github.workspace }}/detours-install/lib/"
        shell: cmd

      - name: Configure CMake with Debug info
        run: |
          cmake -B ${{ github.workspace }}/build `
            -DCMAKE_BUILD_TYPE=Debug `
            -DCMAKE_PREFIX_PATH="${{ env.Qt5_Dir }}" `
            -DDetours_ROOT="${{ github.workspace }}/detours-install" `
            -G "Visual Studio 17 2022" -A x64

      - name: Build for analysis
        run: cmake --build ${{ github.workspace }}/build --config Debug

      - name: Check code formatting
        run: |
          Write-Host "Checking code formatting..."

          # Check for common code style issues
          $cppFiles = Get-ChildItem -Path . -Include "*.cpp", "*.h" -Recurse | Where-Object { $_.FullName -notmatch "build|vcpkg" }

          $issues = @()

          foreach ($file in $cppFiles) {
            $content = Get-Content $file.FullName -Raw
            
            # Check for tabs vs spaces
            if ($content -match "`t") {
              $issues += "File $($file.Name): Contains tabs instead of spaces"
            }
            
            # Check for trailing whitespace
            $lines = Get-Content $file.FullName
            for ($i = 0; $i -lt $lines.Count; $i++) {
              if ($lines[$i] -match "\s+$") {
                $issues += "File $($file.Name): Line $($i+1) has trailing whitespace"
              }
            }
            
            # Check for very long lines (>120 characters)
            for ($i = 0; $i -lt $lines.Count; $i++) {
              if ($lines[$i].Length -gt 120) {
                $issues += "File $($file.Name): Line $($i+1) is too long ($($lines[$i].Length) characters)"
              }
            }
          }

          if ($issues.Count -gt 0) {
            Write-Host "Code style issues found:" -ForegroundColor Yellow
            $issues | ForEach-Object { Write-Host "  $_" -ForegroundColor Yellow }
            Write-Host "Consider fixing these issues for better code quality" -ForegroundColor Yellow
          } else {
            Write-Host "✓ No major code style issues found" -ForegroundColor Green
          }
        shell: powershell

      - name: Check for security issues
        run: |
          Write-Host "Checking for potential security issues..."

          $cppFiles = Get-ChildItem -Path . -Include "*.cpp", "*.h" -Recurse | Where-Object { $_.FullName -notmatch "build|vcpkg" }

          $securityIssues = @()

          foreach ($file in $cppFiles) {
            $content = Get-Content $file.FullName -Raw
            
            # Check for potentially unsafe functions
            $unsafeFunctions = @("strcpy", "strcat", "sprintf", "gets", "scanf")
            foreach ($func in $unsafeFunctions) {
              if ($content -match "\b$func\s*\(") {
                $securityIssues += "File $($file.Name): Uses potentially unsafe function '$func'"
              }
            }
            
            # Check for hardcoded credentials or keys
            if ($content -match "(password|key|secret)\s*=\s*[`"'][^`"']+[`"']") {
              $securityIssues += "File $($file.Name): Potential hardcoded credential found"
            }
            
            # Check for SQL injection patterns
            if ($content -match "SELECT.*\+.*\+") {
              $securityIssues += "File $($file.Name): Potential SQL injection vulnerability"
            }
          }

          if ($securityIssues.Count -gt 0) {
            Write-Host "Potential security issues found:" -ForegroundColor Red
            $securityIssues | ForEach-Object { Write-Host "  $_" -ForegroundColor Red }
            Write-Host "Please review these issues carefully" -ForegroundColor Red
          } else {
            Write-Host "✓ No obvious security issues found" -ForegroundColor Green
          }
        shell: powershell

      - name: Check documentation
        run: |
          Write-Host "Checking documentation..."

          $requiredDocs = @("README.md", "QUICKSTART.md", "HOOK_TESTING.md")
          $missingDocs = @()

          foreach ($doc in $requiredDocs) {
            if (-not (Test-Path $doc)) {
              $missingDocs += $doc
            }
          }

          if ($missingDocs.Count -gt 0) {
            Write-Host "Missing documentation files:" -ForegroundColor Yellow
            $missingDocs | ForEach-Object { Write-Host "  $_" -ForegroundColor Yellow }
          } else {
            Write-Host "✓ All required documentation files present" -ForegroundColor Green
          }

          # Check if README has basic sections
          if (Test-Path "README.md") {
            $readmeContent = Get-Content "README.md" -Raw
            $requiredSections = @("# ", "## ", "### ")
            $hasStructure = $false
            
            foreach ($section in $requiredSections) {
              if ($readmeContent -match $section) {
                $hasStructure = $true
                break
              }
            }
            
            if ($hasStructure) {
              Write-Host "✓ README.md has proper structure" -ForegroundColor Green
            } else {
              Write-Host "README.md lacks proper markdown structure" -ForegroundColor Yellow
            }
          }
        shell: powershell

          - name: Check dependencies
      run: |
        Write-Host "Checking dependencies..."
        
        # Check dependency management approach
        if (Test-Path ".github/workflows/build.yml") {
          $buildContent = Get-Content ".github/workflows/build.yml" -Raw
          if ($buildContent -match "jurplel/install-qt-action") {
            Write-Host "✓ Using jurplel/install-qt-action for Qt installation" -ForegroundColor Green
          }
          if ($buildContent -match "microsoft/Detours") {
            Write-Host "✓ Using direct Detours installation from source" -ForegroundColor Green
          }
        }
        
        Write-Host "Project uses direct dependency installation approach" -ForegroundColor Cyan

          # Check CMakeLists.txt for common issues
          if (Test-Path "CMakeLists.txt") {
            $cmakeContent = Get-Content "CMakeLists.txt" -Raw
            
            if ($cmakeContent -match "cmake_minimum_required") {
              Write-Host "✓ CMakeLists.txt has minimum version requirement" -ForegroundColor Green
            } else {
              Write-Host "CMakeLists.txt missing cmake_minimum_required" -ForegroundColor Yellow
            }
            
            if ($cmakeContent -match "project\s*\(") {
              Write-Host "✓ CMakeLists.txt has project declaration" -ForegroundColor Green
            } else {
              Write-Host "CMakeLists.txt missing project declaration" -ForegroundColor Yellow
            }
          }
        shell: powershell

  license-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check license headers
        run: |
          echo "Checking for license headers in source files..."

          # Find all C++ source files
          cpp_files=$(find . -name "*.cpp" -o -name "*.h" | grep -v build | grep -v vcpkg)

          missing_license=()

          for file in $cpp_files; do
            if ! grep -q -i "copyright\|license\|mit\|gpl" "$file"; then
              missing_license+=("$file")
            fi
          done

          if [ ${#missing_license[@]} -gt 0 ]; then
            echo "Files missing license headers:"
            printf '%s\n' "${missing_license[@]}"
            echo "Consider adding appropriate license headers"
          else
            echo "✓ All source files have license information"
          fi
